# src/streaming/processor.py

import queue
import uuid
import time
import os
import yaml

from ml_client import send_to_ml_rest
from alert_dispatcher import handle_alert
from kafka_producer import KafkaSender

processing_queue = queue.Queue(maxsize=10000)

attack_flow_producer = None

# Set absolute or expanded path to your kafka_config.yaml
CONFIG_PATH = os.path.expanduser("/Users/devanshijain/Desktop/jobserver/simplified-packet-detector/config/kafka_config.yaml")

def initialize_attack_flow_producer():
    global attack_flow_producer
    # Load kafka config from absolute path
    with open(CONFIG_PATH, "r") as fp:
        k_conf = yaml.safe_load(fp)["kafka"]

    attack_flow_producer = KafkaSender(
        servers=k_conf["bootstrap_servers"],
        topic="attack_flow",
        linger_ms=k_conf.get("linger_ms", 10),
        acks=k_conf.get("acks", 1),
    )
    print("[Processor] Kafka producer for attack_flow initialized.")

def add_to_queue(data):
    try:
        processing_queue.put_nowait(data)
    except queue.Full:
        print("[Processor] ‚ùå Queue full, dropping data")

def process_data():
    while True:
        try:
            item = processing_queue.get(timeout=5)
        except queue.Empty:
            continue

        try:
            # Fill required fields with defaults if missing
            item["request_id"] = item.get("request_id") or str(uuid.uuid4())
            item["timestamp"] = item.get("timestamp") or int(time.time() * 1_000_000)
            item["src_ip"] = item.get("src_ip", "0.0.0.0")
            item["dst_ip"] = item.get("dst_ip", "0.0.0.0")

            prediction = send_to_ml_rest(item)

            if prediction:
                handle_alert(item, prediction)  # existing logging, alerting

                if prediction.get("prediction") == 1:
                    print(f"üö® MALICIOUS | {item['src_ip']} ‚Üí {item['dst_ip']} | Confidence = {prediction.get('confidence', 0):.3f}")

                    # Send attack flow to kafka attack_flow topic
                    if attack_flow_producer:
                        attack_flow_producer.send(item)  # producer initialized with attack_flow topic

                else:
                    print(f"‚úÖ BENIGN | {item['src_ip']} ‚Üí {item['dst_ip']} | Confidence = {prediction.get('confidence', 0):.3f}")

            else:
                print("[Processor] ‚ùå No prediction received from ML.")

        except Exception as e:
            print(f"[Processor] ‚ùå Error during ML prediction: {e}")

        finally:
            processing_queue.task_done()

# Initialize Kafka producer when this module is imported
initialize_attack_flow_producer()
